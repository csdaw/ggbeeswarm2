% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/position-beeswarm.R
\name{position_beeswarm}
\alias{position_beeswarm}
\title{Separate coincident points with the beeswarm package}
\usage{
position_beeswarm(
  method = "swarm",
  spacing = 1,
  side = 0L,
  priority = "ascending",
  dodge.width = NULL,
  corral = "none",
  corral.width = 0.2
)
}
\arguments{
\item{method}{\code{string}. Method for arranging points, default is \code{"swarm"}. See
details below.}

\item{spacing}{\code{numeric}. Relative spacing between points, default is \code{1}.
You should adjust this if you change the size of the points. Generally the
spacing should be 2/3 of the point size i.e. if \code{size = 3}, then \code{spacing = 2},
but this is ultimately up to personal preference.}

\item{side}{\code{integer}. Direction to perform jittering: use \code{0L} for both directions;
\code{1L} for right/upwards; \code{-1L} for left/downwards.}

\item{priority}{\code{string}. Method used to perform point layout, default is
\code{"ascending"}. See details below.}

\item{dodge.width}{\code{numeric}. Amount to dodge points from different aesthetic
groups, default is \code{NULL} for no dodging.}

\item{corral}{\code{string}. Method used to adjust points that would be placed to
wide horizontally, default is \code{"none"}. See details below.}

\item{corral.width}{\code{numeric}. Width of the corral, default is \code{0.2}.}
}
\description{
Offset points to avoid overplotting using the
\code{\link{swarmx}} function from the \code{beeswarm} package.
}
\details{
\strong{method:} specifies the algorithm used to avoid overlapping points. The
default \code{"swarm"} method places points in increasing order. If a point would
overlap with an existing point, it is shifted sideways (along the group axis)
by a minimal amount sufficient to avoid overlap.

The other 3 methods first discretise the values along the data axis, in order
to create more efficient packing. The \code{"square"} method places points on a
square grid, whereas \code{"hex"} uses a hexagonal grid. \code{"centre"} uses a square grid
to produce a symmetric swarm. The number of break points for discretisation
is determined by a combination of the available plotting area and the
\code{spacing} argument.

\strong{priority:} controls the order in which points are placed, which generally
has a noticeable effect on the plot appearance. \code{"ascending"} gives the
'traditional' beeswarm plot. \code{"descending"} is the opposite. \code{"density"}
prioritizes points with higher local density. \code{"random"} places points in a
random order. \code{"none"} places points in the order provided.

\strong{corral:} By default, swarms from different groups are not prevented from
overlapping, i.e. \verb{"corral = "none"}. Thus, datasets that are very large or
unevenly distributed may produce ugly overlapping beeswarms. To control
runaway points one can use the following methods. \code{"gutter"} collects runaway
points along the boundary between groups. \code{"wrap"} implement periodic boundaries.
\code{"random"} places runaway points randomly in the region. \code{"omit"} omits runaway
points.
}
\examples{
#
}
\seealso{
\link{position_quasirandom}
}
